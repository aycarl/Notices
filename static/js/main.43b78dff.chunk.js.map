{"version":3,"sources":["redux/notices/notice.selectors.js","redux/user/user.selectors.js","Components/cards/notice-card.js","Components/cards/card-container.js","firebase/firebase.utils.js","Components/new-notice-modal/new-notice-modal.js","Components/custom-button/custom-button.jsx","Pages/HomePage.js","Pages/About.js","Pages/MyProfile.js","Components/form-imput/form-input.jsx","Components/sign-in/sign-in.jsx","Components/sign-up/sign-up.jsx","Pages/SigninAndSignup/SigninAndSignup.jsx","Components/Header.js","redux/user/user.types.js","redux/notices/notice.types.js","App.js","redux/user/user.actions.js","redux/notices/notice.actions.js","serviceWorker.js","redux/user/user.reducer.js","redux/notices/notice.reducer.js","redux/root-reducer.js","redux/store.js","index.js","Assets/stylesheets/header.module.scss"],"names":["selectAllNotices","createSelector","state","noticeBoard","notices","selectCurrentUser","user","currentUser","NoticeCard","id","isQuote","alignment","citation","title","body","timestamp","Card","className","key","bg","text","Body","Title","Text","Footer","CardContainer","CardColumns","map","noticeId","quoteIndicator","createdAt","quoteAlignment","quoteCitation","createUserProfileDocument","userAuth","additionalData","a","userRef","firestore","doc","uid","get","exists","displayName","email","Date","set","console","log","message","createNewNotice","notice","noticeCollectionRef","collection","noticeRef","toDateString","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","NewNoticeModal","props","addNotice","useState","noticeTitle","setNoticeTitle","noticeBody","setNoticeBody","noticeQuoteCitation","setNoticeQuoteCitation","toggleDisabled","toggleDisabledIndicator","noticeQuoteAlignment","setNoticeQuoteAlignment","handleSubmit","event","preventDefault","getTime","toString","Modal","size","aria-labelledby","centered","Form","onSubmit","Header","closeButton","Group","controlId","Label","Control","type","placeholder","value","onChange","e","target","disabled","as","rows","Row","Col","File","Input","Check","label","Button","variant","onClick","onHide","CustomButton","children","isGoogleSignIn","otherProps","HomePage","toggleModal","modalShow","setState","this","Container","fluid","block","show","Component","mapStateToProps","createStructuredSelector","connect","About","FormInput","handleChange","length","SignIn","password","signInWithEmailAndPassword","error","name","required","React","SignUp","confirmPassword","alert","createUserWithEmailAndPassword","SignInAndSignUpPage","Nav","styles","header","activeKey","Item","options","Link","href","eventKey","signOut","UserActionTypes","NoticeActionTypes","App","unsubscibeFromAuth","unsubscribeSnapshotFromComponent","setCurrentUser","loadNoticeBoard","onAuthStateChanged","onSnapshot","snapShot","data","noticeBoardRef","querySnapshot","docs","exact","path","component","render","to","MyProfile","dispatch","payload","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","noticeReducer","Object","assign","persistConfig","storage","whitelist","rootReducer","combineReducers","persistReducer","middlewares","logger","store","createStore","applyMiddleware","persistor","persistStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.43b78dff.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\n\r\nconst selectNoticeBoard = state => state.noticeBoard;\r\n\r\nexport const selectAllNotices = createSelector(\r\n  [selectNoticeBoard],\r\n  noticeBoard => noticeBoard.notices\r\n);","import { createSelector } from 'reselect';\r\n\r\nconst selectUser = state => state.user;\r\n\r\nexport const selectCurrentUser = createSelector(\r\n  [selectUser],\r\n  user => user.currentUser\r\n);","import React from \"react\";\r\n\r\nimport { Card } from \"react-bootstrap\";\r\n\r\nconst NoticeCard = ({ id, isQuote, alignment, citation, title, body, timestamp }) => {\r\n  \r\n  return (\r\n    <div>\r\n      {isQuote ? (\r\n        <Card className={alignment} key={id} >\r\n          <blockquote className=\"blockquote mb-0 card-body\">\r\n            <p>{body}</p>\r\n            <footer className=\"blockquote-footer\">\r\n              <small className=\"text-muted\">\r\n                <cite title=\"Source Title\">{citation}</cite>\r\n              </small>\r\n            </footer>\r\n          </blockquote>\r\n        </Card>\r\n      ) : (\r\n        <Card bg=\"light\" text=\"dark\" key={id}>\r\n          <Card.Body>\r\n            <Card.Title>{title}</Card.Title>\r\n            <Card.Text>\r\n              {body}\r\n            </Card.Text>\r\n          </Card.Body>\r\n          <Card.Footer>\r\n            <small className=\"text-muted\">{timestamp}</small>\r\n          </Card.Footer>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoticeCard;\r\n","import React from \"react\";\r\n\r\nimport { CardColumns } from \"react-bootstrap\";\r\nimport NoticeCard from \"./notice-card\";\r\n\r\nconst CardContainer = ({ notices }) => {\r\n  return (\r\n    <CardColumns>\r\n      {\r\n        notices.map(\r\n        ({\r\n          noticeId,\r\n          quoteIndicator,\r\n          createdAt,\r\n          quoteAlignment,\r\n          quoteCitation,\r\n          body,\r\n          title,\r\n        }) => (\r\n          <NoticeCard key={noticeId}\r\n            id={noticeId}\r\n            isQuote={quoteIndicator}\r\n            title={title}\r\n            body={body}\r\n            timestamp={createdAt}\r\n            alignment={quoteAlignment}\r\n            citation={quoteCitation}\r\n          />\r\n        )\r\n        )}\r\n    </CardColumns>\r\n  );\r\n};\r\n\r\nexport default CardContainer;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\r\n};\r\n\r\n//This function creates a new user profile in the firestore database for user authentication\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  const snapShot = await userRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating user\", error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\n//This function creates a new notice post in the firstore database\r\nexport const createNewNotice = async (notice, userAuth) => {\r\n  if (!userAuth) return;\r\n\r\n  const noticeCollectionRef = firestore.collection('notices');\r\n\r\n  const noticeRef = noticeCollectionRef.doc();\r\n\r\n  const noticeSnapShot = await noticeRef.get();\r\n\r\n  if (!noticeSnapShot.exists) {\r\n    const {\r\n      title,\r\n      body,\r\n      noticeId,\r\n      quoteCitation,\r\n      quoteIndicator,\r\n      quoteAlignment,\r\n    } = notice;\r\n    const { displayName } = userAuth;\r\n    const createdAt = new Date().toDateString();\r\n\r\n    try {\r\n      await noticeRef.set({\r\n        displayName,\r\n        createdAt,\r\n        noticeId,\r\n        title,\r\n        body,\r\n        quoteCitation,\r\n        quoteIndicator,\r\n        quoteAlignment,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"error creating new post\", error.message);\r\n    }\r\n  }\r\n\r\n  return noticeRef;\r\n};\r\n\r\n//This function reads all notices from the firestore database\r\n// and returns a reference to the notices collection\r\n// export const readAllNotices = () => {\r\n//   const noticeBoardRef = firestore.collection(\"notices\");\r\n//   let notices = [];\r\n\r\n//   noticeBoardRef.get().then((querySnapshot) => {\r\n//     querySnapshot.forEach((snapShot) => {\r\n//       notices.push(snapShot.data());\r\n//     });\r\n//   });\r\n\r\n//   return notices;\r\n// };\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n","import React, { useState } from \"react\";\r\n//import { connect } from \"react-redux\";\r\n\r\nimport { Modal, Button, Form, Col } from \"react-bootstrap\";\r\n\r\nimport { createNewNotice } from \"../../firebase/firebase.utils\";\r\n// import { addNotice } from \"./../../redux/notices/notice.actions\";\r\n\r\nimport \"./new-notice-modal.styles.scss\";\r\n\r\nconst NewNoticeModal = ({ currentUser, addNotice, ...props }) => {\r\n  const [noticeTitle, setNoticeTitle] = useState(\"\");\r\n  const [noticeBody, setNoticeBody] = useState(\"\");\r\n  const [noticeQuoteCitation, setNoticeQuoteCitation] = useState(\"\");\r\n  const [toggleDisabled, toggleDisabledIndicator] = useState(false);\r\n  const [noticeQuoteAlignment, setNoticeQuoteAlignment] = useState(\"\");\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    let timestamp = new Date();\r\n\r\n    let notice = {\r\n      noticeId: timestamp.getTime().toString(),\r\n      title: noticeTitle,\r\n      body: noticeBody,\r\n      quoteCitation: noticeQuoteCitation,\r\n      quoteIndicator: toggleDisabled,\r\n      quoteAlignment: noticeQuoteAlignment,\r\n    };\r\n\r\n    try {\r\n      await createNewNotice(notice, currentUser);\r\n\r\n      // noticeRef.onSnapshot((snapShot) =>\r\n      //   addNotice({\r\n      //     id: snapShot.id,\r\n      //     ...snapShot.data()\r\n      //   })\r\n      // );\r\n\r\n    } catch (error) {\r\n      console.log(\"error message\", error.message);\r\n    }\r\n\r\n    console.log(\"This was typed \" + noticeTitle + \" \" + noticeBody);\r\n    setNoticeBody(\"\");\r\n    setNoticeTitle(\"\");\r\n    setNoticeQuoteAlignment(\"\");\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    toggleDisabledIndicator(!toggleDisabled);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Form onSubmit={handleSubmit}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            New Notice\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form.Group controlId=\"formGroupNoticeTitle\">\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter notice title (if not a quote)\"\r\n              value={noticeTitle}\r\n              onChange={(e) => setNoticeTitle(e.target.value)}\r\n              disabled={toggleDisabled}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"formGroupNoticeBody\">\r\n            <Form.Label>Body</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows=\"3\"\r\n              placeholder=\"Enter notice text/quote (250 chars max)\"\r\n              value={noticeBody}\r\n              onChange={(e) => setNoticeBody(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formGroupFileInput\">\r\n              <Form.Label>Image/Poster (optional)</Form.Label>\r\n              <Form.File.Input />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formQuoteToggle\">\r\n              <Form.Check\r\n                type=\"switch\"\r\n                label=\"This is a quote.\"\r\n                onChange={handleChange}\r\n              />\r\n            </Form.Group>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Group as={Col} controlId=\"formQuoteCitation\">\r\n              <Form.Label>Quote Citation</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter citation (name, source, ...)\"\r\n                value={noticeQuoteCitation}\r\n                onChange={(e) => setNoticeQuoteCitation(e.target.value)}\r\n                disabled={!toggleDisabled}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId=\"formQuoteAlignment\">\r\n              <Form.Label>Quote Text Alignment</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                disabled={!toggleDisabled}\r\n                value={noticeQuoteAlignment}\r\n                onChange={(e) => setNoticeQuoteAlignment(e.target.value)}\r\n              >\r\n                <option value=\"text-right\">Right Align</option>\r\n                <option value=\"text-left\">Left Align</option>\r\n                <option value=\"text-center\">Center Align</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Form.Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            className=\"cancel-button\"\r\n            onClick={props.onHide}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button className=\"submit-button\" type=\"submit\">\r\n            Add\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n// const matchDispatchToProps = dispatch => ({\r\n//   addNotice: (notice) => dispatch(addNotice(notice))\r\n// });\r\n\r\nexport default NewNoticeModal;\r\n","import React from 'react';\r\n\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nimport './custom-button.styles.scss';\r\n\r\n\r\nconst CustomButton = ({children, isGoogleSignIn, ...otherProps}) => (\r\n    <Button className={`${isGoogleSignIn ? 'google-sign-in' : '' } custom-button`} {...otherProps}>\r\n        {children}\r\n    </Button>\r\n);\r\n\r\nexport default CustomButton;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectAllNotices } from \"./../redux/notices/notice.selectors\";\r\nimport { selectCurrentUser } from \"./../redux/user/user.selectors\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport CardContainer from \"../Components/cards/card-container\";\r\nimport NewNoticeModal from \"../Components/new-notice-modal/new-notice-modal\";\r\nimport CustomButton from \"./../Components/custom-button/custom-button\";\r\n\r\nimport \"../Assets/stylesheets/pages.modules.scss\";\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modalShow: false,\r\n    };\r\n  }\r\n  toggleModal = () => {\r\n    const { modalShow } = this.state;\r\n    this.setState({ modalShow: !modalShow });\r\n  };\r\n\r\n  render() {\r\n    const { currentUser, notices } = this.props;\r\n    const { modalShow } = this.state;\r\n\r\n    return (\r\n      <Container fluid className=\"page\">\r\n        {currentUser ? (\r\n          <CustomButton\r\n            className=\"addNoticeBtn\"\r\n            size=\"lg\"\r\n            block\r\n            onClick={this.toggleModal}\r\n          >\r\n            Add Notice\r\n          </CustomButton>\r\n        ) : null}\r\n        <NewNoticeModal\r\n          show={modalShow}\r\n          onHide={this.toggleModal}\r\n          currentUser={currentUser}\r\n        />\r\n        <CardContainer notices={notices} />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser,\r\n  notices: selectAllNotices\r\n});\r\n\r\nexport default connect(mapStateToProps)(HomePage);\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nimport \"./../Assets/stylesheets/pages.modules.scss\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Container fluid className=\"page\">\r\n      <h1>About</h1>\r\n      <hr />\r\n      <p>This is a simple virtual notice board application.</p>\r\n      <p>Feel free to catch up with random posts and add yours too!</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { Container } from 'react-bootstrap'\r\n\r\nconst MyProfile = ({ currentUser }) => {\r\n  console.log(currentUser)\r\n    return(\r\n      <Container fluid className=\"page\">\r\n        <h1>Profile</h1>\r\n        <hr />\r\n        <p>No data yet</p>\r\n      </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ user: {currentUser} }) => ({\r\n  currentUser\r\n});\r\n\r\nexport default connect(mapStateToProps)(MyProfile)","import React from 'react';\r\n\r\nimport './form-input.styles.scss';\r\n\r\nconst FormInput = ({handleChange, label, ...otherProps}) => (\r\n    <div className='group'>\r\n        <input className='form-input' onChange={handleChange} {...otherProps} />\r\n        {\r\n            label ?\r\n            (<label className={`${otherProps.value.length ? 'shrink' : ''} form-input-label`}>\r\n                {label}\r\n            </label>)\r\n            : null\r\n        }\r\n    </div>\r\n)\r\n\r\nexport default FormInput;","import React from \"react\";\r\n\r\nimport FormInput from \"./../form-imput/form-input\";\r\nimport CustomButton from \"../custom-button/custom-button\";\r\nimport { auth, signInWithGoogle } from \"../../firebase/firebase.utils\";\r\n\r\nimport \"./sign-in.styles.scss\";\r\n\r\nclass SignIn extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { email, password } = this.state;\r\n\r\n    try {\r\n      await auth.signInWithEmailAndPassword(email, password);\r\n      this.setState({ email: \"\", password: \"\" });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { value, name } = event.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sign-in\">\r\n        <h2>I already have an account</h2>\r\n        <span>Sign in with your email and password</span>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            name=\"email\"\r\n            type=\"email\"\r\n            value={this.state.email}\r\n            handleChange={this.handleChange}\r\n            label=\"email\"\r\n            required\r\n          />\r\n          <FormInput\r\n            name=\"password\"\r\n            type=\"password\"\r\n            value={this.state.password}\r\n            handleChange={this.handleChange}\r\n            label=\"password\"\r\n            required\r\n          />\r\n          <div className=\"buttons\">\r\n            <CustomButton type=\"submit\">Sign In</CustomButton>\r\n            <CustomButton onClick={signInWithGoogle} isGoogleSignIn>\r\n              Google Sign In\r\n            </CustomButton>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\n\r\nimport FormInput from \"../form-imput/form-input\";\r\nimport CustomButton from \"../custom-button/custom-button\";\r\n\r\nimport { auth, createUserProfileDocument } from \"../../firebase/firebase.utils\";\r\n\r\nimport \"./sign-up.styles.scss\";\r\n\r\nclass SignUp extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      displayName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n    };\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const { displayName, email, password, confirmPassword } = this.state;\r\n\r\n    if (password !== confirmPassword) {\r\n      alert(\"Passwords don't match\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { user } = await auth.createUserWithEmailAndPassword(\r\n        email,\r\n        password\r\n      );\r\n\r\n      await createUserProfileDocument(user, { displayName });\r\n\r\n      this.setState({\r\n        displayName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { displayName, email, password, confirmPassword } = this.state;\r\n\r\n    return (\r\n      <div className=\"sign-up\">\r\n        <h2 className=\"title\">I do not have an account</h2>\r\n        <span>Sign up with your email and password</span>\r\n        <form className=\"sign-up-form\" onSubmit={this.handleSubmit}>\r\n          <FormInput\r\n            type=\"text\"\r\n            name=\"displayName\"\r\n            value={displayName}\r\n            onChange={this.handleChange}\r\n            label=\"Display Name\"\r\n            required\r\n          />\r\n          <FormInput\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={this.handleChange}\r\n            label=\"Email\"\r\n            required\r\n          />\r\n          <FormInput\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={this.handleChange}\r\n            label=\"Password\"\r\n            required\r\n          />\r\n          <FormInput\r\n            type=\"password\"\r\n            name=\"confirmPassword\"\r\n            value={confirmPassword}\r\n            onChange={this.handleChange}\r\n            label=\"Confirm Password\"\r\n            required\r\n          />\r\n          <CustomButton type=\"submit\">SIGN UP</CustomButton>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","import React from 'react';\r\n\r\nimport SignIn from '../../Components/sign-in/sign-in'\r\nimport SignUp from '../../Components/sign-up/sign-up'\r\n\r\nimport './sign-in-and-sign-up.styles.scss';\r\n\r\nconst SignInAndSignUpPage = () => (\r\n    <div className='sign-in-and-sign-up'>\r\n        <SignIn />\r\n        <SignUp />\r\n    </div>\r\n);\r\n\r\nexport default SignInAndSignUpPage;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectCurrentUser } from \"./../redux/user/user.selectors\"\r\n\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport { auth } from \"../firebase/firebase.utils\";\r\n\r\nimport styles from \"./../Assets/stylesheets/header.module.scss\";\r\n\r\nconst Header = ({ currentUser }) => {\r\n  return (\r\n    <Nav className={`${styles.header} justify-content-end`} activeKey=\"/\">\r\n      <Nav.Item className={styles.options}>\r\n        <Nav.Link href=\"/\">Home</Nav.Link>\r\n      </Nav.Item>\r\n      {currentUser ? (\r\n        <Nav.Item className={styles.options}>\r\n          <Nav.Link\r\n            href={`/${currentUser.displayName}`}\r\n            eventKey=\"link-profile\"\r\n          >\r\n            Your profile\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      ) : (\r\n        <Nav.Item className={styles.options}>\r\n          <Nav.Link href=\"/about\" eventKey=\"link-about\">\r\n            About\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      )}\r\n      {currentUser ? (\r\n        <Nav.Item className={styles.options}>\r\n          <Nav.Link onClick={() => auth.signOut()} eventKey=\"link-sign-out\">\r\n            Sign Out\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      ) : (\r\n        <Nav.Item className={styles.options}>\r\n          <Nav.Link href=\"/signin\" eventKey=\"link-sign-in\">\r\n            Sign In\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      )}\r\n    </Nav>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","export const UserActionTypes = {\r\n  SET_CURRENT_USER: 'SET_CURRENT_USER'\r\n}","export const NoticeActionTypes = {\r\n  ADD_NOTICE: 'ADD_NOTICE',\r\n  DELETE_NOTICE: 'DELETE_NOTICE',\r\n  TOGGLE_READ_NOTICE: 'TOGGLE_READ_NOTICE',\r\n  LOAD_NOTICE_BOARD: 'LOAD_NOTICE_BOARD'\r\n}","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport HomePage from \"./Pages/HomePage\";\r\nimport About from \"./Pages/About\";\r\nimport MyProfile from \"./Pages/MyProfile\";\r\nimport SignInAndSignUpPage from \"./Pages/SigninAndSignup/SigninAndSignup\";\r\n\r\nimport Header from \"./Components/Header\";\r\n\r\nimport { auth, createUserProfileDocument, firestore } from \"./firebase/firebase.utils\";\r\nimport { setCurrentUser } from \"./redux/user/user.actions\";\r\nimport { loadNoticeBoard } from \"./redux/notices/notice.actions\";\r\n\r\nimport { selectCurrentUser } from \"./redux/user/user.selectors\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  unsubscibeFromAuth = null;\r\n  unsubscribeSnapshotFromComponent = null;\r\n\r\n  componentDidMount() {\r\n    const { setCurrentUser, loadNoticeBoard } = this.props;\r\n\r\n    this.unsubscibeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\r\n      if (userAuth) {\r\n        const userRef = await createUserProfileDocument(userAuth);\r\n\r\n        userRef.onSnapshot((snapShot) =>\r\n          setCurrentUser({\r\n            id: snapShot.id,\r\n            ...snapShot.data(),\r\n          })\r\n        );\r\n      } \r\n      setCurrentUser(userAuth);\r\n    });\r\n    \r\n    const noticeBoardRef = firestore.collection(\"notices\");\r\n\r\n    this.unsubscribeSnapshotFromComponent = noticeBoardRef.onSnapshot(\r\n      async (querySnapshot) => {\r\n        const notices = querySnapshot.docs.map((snapShot) => {\r\n          return snapShot.data()\r\n        });\r\n\r\n        loadNoticeBoard(notices);\r\n      }\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscibeFromAuth();\r\n    this.unsubscribeSnapshotFromComponent();\r\n  }\r\n\r\n  render() {\r\n    const { currentUser } = this.props;\r\n\r\n    return (\r\n      <Router>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route exact path=\"/about\" component={About} />\r\n          <Route\r\n            exact\r\n            path=\"/signin\"\r\n            render={() =>\r\n              currentUser ? <Redirect to=\"/\" /> : <SignInAndSignUpPage />\r\n            }\r\n          />\r\n          <Route path=\"/:userName\" component={MyProfile} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  currentUser: selectCurrentUser\r\n});\r\n\r\nconst matchDispatchToProps = (dispatch) => ({\r\n  setCurrentUser: (user) => dispatch(setCurrentUser(user)),\r\n  loadNoticeBoard: notices => dispatch(loadNoticeBoard(notices))\r\n});\r\n\r\nexport default connect(mapStateToProps, matchDispatchToProps)(App);\r\n","import { UserActionTypes } from './user.types'\r\n\r\nexport const setCurrentUser = user => ({\r\n  type: UserActionTypes.SET_CURRENT_USER,\r\n  payload: user\r\n});","import { NoticeActionTypes } from \"./notice.types\";\r\n\r\nexport const deleteNotice = Id => {\r\n  return { type: NoticeActionTypes.DELETE_NOTICE, noticeId: Id };\r\n};\r\n\r\nexport const toggleReadNotice = Id => {\r\n  return { type: NoticeActionTypes.TOGGLE_READ_NOTICE, noticeId: Id };\r\n};\r\n\r\nexport const addNotice = notice => {\r\n  return {type: NoticeActionTypes.ADD_NOTICE, payload: notice};\r\n}\r\n\r\nexport const loadNoticeBoard = notices => {\r\n  return {type: NoticeActionTypes.LOAD_NOTICE_BOARD, payload: notices};\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { UserActionTypes } from './user.types'\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null\r\n}\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case UserActionTypes.SET_CURRENT_USER:\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload\r\n      }\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default userReducer;","import { NoticeActionTypes } from \"./notice.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  notices: []\r\n}\r\n\r\nconst noticeReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case NoticeActionTypes.ADD_NOTICE:\r\n      return Object.assign({}, state, {\r\n        notices: [\r\n          action.payload,\r\n          ...state.notices\r\n        ]\r\n      });\r\n\r\n    case NoticeActionTypes.LOAD_NOTICE_BOARD:\r\n      return {\r\n        ...state,\r\n        notices: action.payload\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default noticeReducer; \r\n","import { combineReducers } from 'redux'\r\nimport { persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport userReducer from './user/user.reducer'\r\nimport noticeReducer from './notices/notice.reducer'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['noticeBoard']\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  noticeBoard: noticeReducer\r\n});\r\n\r\nexport default persistReducer(persistConfig, rootReducer)","import { createStore, applyMiddleware } from 'redux'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './root-reducer'\r\nimport { persistStore } from 'redux-persist'\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store, persistor } from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__W69nv\",\"logo-container\":\"header_logo-container__28DUj\",\"brandName\":\"header_brandName__3Bvul\",\"options\":\"header_options__1KheW\"};"],"sourceRoot":""}